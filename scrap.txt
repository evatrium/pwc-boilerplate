	"module": "lib/index.esm.js",
	"module.min": "lib/index.esm.min.js",
	"browser": "lib/index.bundle.js",

https://www.codementor.io/bennyp/lets-build-web-components-part-2-the-polyfills-nzy0icg0c


https://codeburst.io/taming-huge-collections-of-dom-nodes-bebafdba332

https://github.com/DannyMoerkerke/material-webcomponents

https://medium.com/dev-channel/focus-inside-shadow-dom-78e8a575b73


https://jasmine.github.io/2.0/introduction.html

https://xstate.js.org/docs/

https://app.slack.com/client/T41ECBKQ8/C41ECC0V6/thread/C41ECC0V6-1563274057.215400


// import {context} from "./xelement";
// import {obi} from "@iosio/obi";
// import {isFunc, isObj} from "./utils";
//
// export const provide = (namespace, attach) => {
//     let obj = isFunc(attach) ? obi(attach(context)) : (isObj(attach) ? obi(attach) : attach);
//     return (context[namespace] = obj, obj);
// };
//


https://github.com/UpperCod/preact-tag/tree/master/src


    _initialRender = (...next) => {

        let results = this.render(...next),
            _usingFrag;

        if(isFunc(results)){
            this._renderer = results;
            results = results(...next);
        }

        this._usingFrag = _usingFrag = results.name === FRAGMENT_TYPE;

        this._mountPoint = d.createElement(_usingFrag ? 'template' : results.name);
        this._root.appendChild(this._mountPoint);
        this._base = patch(_usingFrag ? this._root : this._mountPoint, results);
        requestAnimationFrame(() => {
            this.classList.add('___');
            this.didRender(...next);
            this._unsubs.push(this.lifeCycle(...next));
        });

        this._has_mounted = true;
    };

    _subsequentRender = (...next) => {
        !this.willRender(...next) // returning true will prevent re render
        && patch(
            this._usingFrag ? this._root : this._base,
            isFunc(this._renderer) ? this._renderer(...next) : this.render(...next)
        ) && this.didRender(...next);
    };

    update = () => {
        if (!this._process) {
            this._process = this._mounted.then((next) => {
                next = [extend({Host: this}, this[PROPS]), this.state, this.context];
                !this._has_mounted
                    ? this._initialRender(...next)
                    : this._subsequentRender(...next);
                shady && shady.styleSubtree(this);
                this._process = false;
            });
        }
        return this._process;
    };






/*
    ------------- save


let postInitial = (next) => {
    this._unsubs.push(this.lifeCycle(...next));
    !TEST_ENV && this.classList.add('___');
};

//minifier moves this to the constructor anyways
this.update = () => {
    if (!this._process) {

        this._process = this._mounted.then((next, initial, shouldRerender) => {
            next = [extend({host: this}, this[PROPS]), this.state, this.context];
            initial = !this._hasMounted;
            // returning a falsy value (other than undefined) will prevent a re*-render
            shouldRerender = this.willRender(...next, initial);
            if (shouldRerender === undefined || shouldRerender || initial) {
                render(this.render(...next), this._root);
                this._hasMounted = true;
                if (initial) !TEST_ENV
                    ? requestAnimationFrame(() => postInitial(next))
                    : postInitial(next);
            }
            this._process = false;
        });
    }
    return this._process;
};

this.update();
let {_initAttrs} = this.constructor;
let length = _initAttrs.length;
while (length--) _initAttrs[length](this);

*/